# Based on Lamport's "Paxos Made Simple" paper

#
# Constants
#
NUM_PROPOSERS = 2
NUM_ACCEPTORS = 1

def is_majority(c):
    return c > NUM_ACCEPTORS // 2

# Only a single value is chosen
always assertion SingleValueChosen:
    return len(chosen)<=1


role Proposer:
    action Init:
        self.proposal = record(n=-1, v=self.__id__)
        self.prepared = genericset()

    # A proposer selects a proposal number n and sends a prepare
    # request with number n to a majority of acceptors.
    action Phase1:
        unsent = genericset(acceptors)
        while is_majority(len(unsent)):
            a = any unsent
            response = a.prepare(self.n)
            (promise, proposal, x, y) = response
            atomic:
                if promise:
                    self.prepared.add(a)
                if proposal and (self.proposal == None or proposal.n > self.proposal.n):
                    self.proposal = proposal
            unsent.discard(a)

    # If the proposer receives a response to its prepare requests
    # (numbered n) from a majority of acceptors, then it sends an accept
    # request to each of those acceptors for a proposal numbered n with a
    # value v , where v is the value of the highest-numbered proposal among
    # the responses, or is any value if the responses reported no proposals.
    action Phase2:
        require is_majority(len(self.prepared))
        self.proposal.n = self.n
        for acc in self.prepared:
            acc.accept(self.proposal)

role Acceptor:
    action Init:
        # accepted proposals
        self.accepted = genericset()

        # The proposal accepted so far with the highest number
        self.highest_accepted = None

        # promises to not accept proposals below this number
        self.n = -1

    # If an acceptor receives a prepare request with number n greater
    # than that of any prepare request to which it has already responded,
    # then it responds to the request with a promise not to accept any more
    # proposals numbered less than n and with the highest-numbered proposal
    # (if any) that it has accepted.
    func prepare(n):
        if n > self.n:
            self.n = n
            return (True, self.highest_accepted, n, self.n)
        else:
            # cannot make the promise
            return (False, None)


    # If an acceptor receives an accept request for a proposal numbered n,
    # it accepts the proposal unless it has already responded to a prepare
    # request having a number greater than n.
    func accept(proposal):
        if self.n > proposal.n:
            return

        atomic:
            self.accepted.add(proposal)
            self.update_highest_accepted(proposal)
            self.record_history_variables(proposal)


    atomic func update_highest_accepted(proposal):
        if self.highest_accepted == None or self.highest_accepted.n < proposal.n:
            self.highest_accepted = proposal

    # record proposals and chosen values
    atomic func record_history_variables(proposal):
        proposed.add(proposal)

        # tally up the accepted proposals
        tally = genericmap()
        for a in acceptors:
            for proposal in a.accepted:
                tally.setdefault(proposal, 0)
                tally[proposal] += 1

        # check which proposals have a majority
        for item in tally.items():
            count = item[1]
            if is_majority(count):
                proposal = item[0]
                chosen.add(proposal.v)

action Init:
    proposers = []
    acceptors = []
    for i in range(NUM_PROPOSERS):
        proposers.append(Proposer(n=i))
    for i in range(NUM_ACCEPTORS):
        acceptors.append(Acceptor())

    #
    # History variables, used only for checking invariants
    #

    # chosen contains role ids, hashable
    chosen = set()

    # proposed contains mutable records, not hashable
    proposed = genericset()